{"version":3,"sources":["ng://ngx-widget-grid/lib/models/CellSize.model.ts","ng://ngx-widget-grid/lib/models/Grid.model.ts","ng://ngx-widget-grid/lib/models/Rectangle.model.ts","ng://ngx-widget-grid/lib/models/WidgetConfig.model.ts","ng://ngx-widget-grid/lib/Utils.ts","ng://ngx-widget-grid/lib/components/widget/widget.component.ts","ng://ngx-widget-grid/lib/models/Cell.model.ts","ng://ngx-widget-grid/lib/models/GridRenderer.model.ts","node_modules/tslib/tslib.es6.js","ng://ngx-widget-grid/lib/components/grid/grid.component.ts","ng://ngx-widget-grid/lib/components/gridOverlay/gridOverlay.component.ts","ng://ngx-widget-grid/lib/models/PathIterator.model.ts","ng://ngx-widget-grid/lib/directives/widgetMover.directive.ts","ng://ngx-widget-grid/lib/directives/widgetResizer.directive.ts","ng://ngx-widget-grid/lib/ngx-widget-grid.module.ts"],"names":["CellSize","rowCount","columnCount","this","_height","_width","Object","defineProperty","prototype","Grid","rows","columns","_rows","_columns","_cellSize","_widgets","add","widget","push","remove","widgetIndex","indexOf","splice","removeAll","hasWidget","resize","Rectangle","obj","top","left","width","height","getSurfaceArea","WidgetConfig","rect","id","generateUID","position","_position","gridArea","widgetCount","Utils","isNumber","val","isDefined","undefined","isObject","topLeft","topRight","right","bottomRight","bottom","bottomLeft","ALL_DIRECTIONS","RESIZE_DIRECTIONS","NgxWidgetComponent","elRef","EventEmitter","widgetConfig","positionChange","emit","_resizable","resizable","setResizeDirections","_resizeDirections","dirs","filter","dir","toUpperCase","_this","isTopResizable","isRightResizable","isBottomResizable","isLeftResizable","isTopRightResizable","isTopLeftResizable","isBottomRightResizable","isBottomLeftResizable","forEach","getConfig","getEl","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Input","Output","Cell","_top","_left","GridRenderer","grid","_grid","positions","cachedNextPosition","obstructions","i","rasterizeCoords","gridWidth","gridHeight","Math","min","max","x","floor","y","getWidgetIdAt","j","widgetId","hasOwnProperty","getWidgetPosition","setWidgetPosition","newPosition","swappingPositions","currPosition","setObstructionValues","hasSpaceLeft","_b","__values","o","m","Symbol","iterator","call","next","length","value","done","tslib_1.__values","_c","getNextPosition","maxPosition","findLargestEmptyArea","isObstructed","excludedArea","_isObstructed","isAreaObstructed","area","options","verticalStart","fromBottom","verticalStep","verticalEnd","horizontalStart","fromRight","horizontalStep","horizontalEnd","getStyle","render","cellSize","toString","display","maxArea","currMaxArea","maxSurfaceArea","currMaxSurfaceArea","_findLargestEmptyAreaFrom","start","endColumn","currHeight","currWidth","currSurfaceArea","emitWidgetPositionUpdated","widgets","unpositionedWidgets","nextPosition","NgxWidgetGridComponent","el","_changeDetector","_renderer","gridRenderer","updateGridSize","cols","_highlightNextPosition","highlightNext","updateNextPositionHighlight","resetHighlights","ngAfterViewInit","refreshWidgets","widgetComponents","changes","subscribe","clearGrid","addWidget","updateRendering","deferredRender","emitUpdatePosition","bind","updateWidget","getGridRectangle","gridContainer","nativeElement","getBoundingClientRect","getClientRects","docElem","ownerDocument","documentElement","window","pageYOffset","clientTop","pageXOffset","clientLeft","clientWidth","clientHeight","swappingWidgets","config","widgetStyles","getWidgetStyle","style","setStyle","assessAvailableGridSpace","getWidgetPositionByWidgetId","isPointObstructed","areaObstructor","highlightArea","setTimeout","highlightedArea","markForCheck","highlightNextPosition","getPositions","widgetPositionChange","index","getWidgetIndex","getWidgetById","find","widgetCmp","gridHasSpaceLeft","gridAlreadyFull","gridFull","ChangeDetectorRef","Renderer2","ContentChildren","NgxGridOverlayComponent","sanitizer","renderer","updateGridLines","showGrid","_highlight","highlight","clearHighlight","_showGrid","clearGridLines","showGridLines","activeHighlight","gridRows","gridCols","cellHeight","cellWidth","bypassSecurityTrustStyle","h","row","w","col","DomSanitizer","PathIterator","end","_start","_heightDelta","_widthDelta","_steps","abs","_currStep","_currPos","_nextPos","console","error","currTopDelta","round","currLeftDelta","hasNext","NgxWidgetMoverDirective","gridCmp","onMove","onUp","onDown","event","preventDefault","addClass","widgetContainer","startPosition","startRender","offsetTop","offsetLeft","eventOffsetX","offsetX","layerX","eventOffsetY","offsetY","layerY","desiredPosition","moverOffset","gridPositions","enableDrag","ngxWidgetMover","PointerEvent","addEventListener","_onMoveListener","_onUpListener","eventClientX","clientX","eventClientY","clientY","gridDimensions","dragPositionX","dragPositionY","currentFinalPos","determineFinalPos","anchorTop","getAnchor","anchorLeft","dropPosition","obstructingWidgetId","finalPos","obstructingWidgetCmp","obstructingWidgetPosition","draggedWidgetPosition","removeClass","removeStyle","removeEventListener","cellWOrH","marginFactor","startPos","desiredPos","cellHt","cellWd","movedDown","movedRight","desiredFinalPosition","path","currPos","targetArea","checkRect","Directive","decorators","type","Inject","forwardRef","HostListener","NgxWidgetResizerDirective","parentContainer","parentElement","_resizeDirection","moveUpAllowed","moveDownAllowed","moveLeftAllowed","moveRightAllowed","ceil","offsetHeight","offsetWidth","delta","draggerOffset","gridDims","setAttribute","findCollision","reverse","foundCollision","requestedStartPoint","requestedEndPoint","requestedPos","NgxWidgetGridModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export class CellSize {\r\n  private _height = 0;\r\n  private _width = 0;\r\n\r\n  constructor(rowCount: number, columnCount: number) {\r\n    this._height = rowCount ? 100 / rowCount : 0;\r\n    this._width = columnCount ? 100 / columnCount : 0;\r\n  };\r\n\r\n  get height() {\r\n    return this._height;\r\n  }\r\n\r\n  get width() {\r\n    return this._width;\r\n  }\r\n}\r\n","import { CellSize } from './CellSize.model';\r\nimport { WidgetConfig } from './WidgetConfig.model';\r\n\r\nexport class Grid {\r\n  private _widgets: WidgetConfig[] = [];\r\n  private _rows = 3;\r\n  private _columns = 3;\r\n  private _cellSize: CellSize;\r\n\r\n  constructor(rows?: number, columns?: number) {\r\n    if (+rows) {\r\n      this._rows = +rows;\r\n    }\r\n    if (+columns) {\r\n      this._columns = +columns;\r\n    }\r\n    this._cellSize = new CellSize(this._rows, this._columns);\r\n  }\r\n\r\n  get widgets() {\r\n    return this._widgets;\r\n  }\r\n\r\n  get rows() {\r\n    return this._rows;\r\n  }\r\n\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  get cellSize() {\r\n    return this._cellSize;\r\n  }\r\n\r\n  add(widget: WidgetConfig) {\r\n    this._widgets.push(widget);\r\n  }\r\n\r\n  remove(widget: WidgetConfig) {\r\n    const widgetIndex = this._widgets.indexOf(widget);\r\n    if (widgetIndex > -1) {\r\n      this._widgets.splice(widgetIndex, 1);\r\n    }\r\n  }\r\n\r\n  removeAll() {\r\n    this._widgets.splice(0);\r\n  }\r\n\r\n  hasWidget(widget: WidgetConfig) {\r\n    const widgetIndex = this._widgets.indexOf(widget);\r\n    return widgetIndex > -1;\r\n  }\r\n\r\n  resize(rows: number, columns: number) {\r\n    columns = +columns || 0;\r\n    rows = +rows || 0;\r\n\r\n    if (columns > 0 && rows > 0 && columns !== this._columns || rows !== this._rows) {\r\n      this._columns = columns;\r\n      this._rows = rows;\r\n      this._cellSize = new CellSize(this._rows, this._columns);\r\n    }\r\n  }\r\n}\r\n","export interface IRectangle {\r\n  top?: number;\r\n  left?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport class Rectangle implements IRectangle {\r\n  public top = 0;\r\n  public left = 0;\r\n  public width = 0;\r\n  public height = 0;\r\n\r\n\r\n  constructor(obj?: IRectangle) {\r\n    if (obj) {\r\n      this.top = +obj.top || 0;\r\n      this.left = +obj.left || 0;\r\n      this.width = +obj.width || 0;\r\n      this.height = +obj.height || 0;\r\n    }\r\n  }\r\n\r\n  public get bottom(): number {\r\n    return this.top + this.height - 1;\r\n  }\r\n\r\n  public get right(): number {\r\n    return this.left + this.width - 1;\r\n  }\r\n\r\n  getSurfaceArea(): number {\r\n    return this.height * this.width;\r\n  }\r\n}\r\n","import { Rectangle } from './Rectangle.model';\r\n\r\nexport class WidgetConfig {\r\n  static widgetCount = 0;\r\n  public id: string;\r\n  private _position: Rectangle = new Rectangle();\r\n\r\n  constructor(rect?: Rectangle) {\r\n    this.id = this.generateUID();\r\n    if (rect) {\r\n      this.position = rect;\r\n    }\r\n  }\r\n\r\n  public get position(): Rectangle {\r\n    return this._position;\r\n  }\r\n\r\n  public set position(gridArea: Rectangle) {\r\n    this._position.top = +gridArea.top ? +gridArea.top : 0;\r\n    this._position.left = +gridArea.left ? +gridArea.left : 0;\r\n    this._position.width = +gridArea.width ? +gridArea.width : 0;\r\n    this._position.height = +gridArea.height ? +gridArea.height : 0;\r\n  }\r\n\r\n  public generateUID() {\r\n    return 'ngxDashboardWidget-' + ++WidgetConfig.widgetCount;\r\n  }\r\n}\r\n","export class Utils {\r\n  static isNumber(val: any): boolean {\r\n    return typeof val === 'number';\r\n  }\r\n\r\n  static isDefined(val: any): boolean {\r\n    return val !== undefined;\r\n  }\r\n\r\n  static isObject(val: any): boolean {\r\n    return typeof val === 'object';\r\n  }\r\n\r\n}\r\n\r\nexport enum RESIZE_DIRECTIONS {\r\n  topLeft = 'NW',\r\n  top = 'N',\r\n  topRight = 'NE',\r\n  right = 'E',\r\n  bottomRight = 'SE',\r\n  bottom = 'S',\r\n  bottomLeft = 'SW',\r\n  left = 'W'\r\n}\r\n\r\nexport const ALL_DIRECTIONS: RESIZE_DIRECTIONS[] = [\r\n  RESIZE_DIRECTIONS.bottom,\r\n  RESIZE_DIRECTIONS.left,\r\n  RESIZE_DIRECTIONS.right,\r\n  RESIZE_DIRECTIONS.top,\r\n  RESIZE_DIRECTIONS.bottomLeft,\r\n  RESIZE_DIRECTIONS.bottomRight,\r\n  RESIZE_DIRECTIONS.topLeft,\r\n  RESIZE_DIRECTIONS.topRight\r\n];\r\n","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\r\nimport { WidgetConfig } from '../../models/WidgetConfig.model';\r\nimport { Rectangle } from '../../models/Rectangle.model';\r\nimport { ALL_DIRECTIONS, RESIZE_DIRECTIONS } from '../../Utils';\r\n\r\n@Component({\r\n             selector: 'ngx-widget',\r\n             styleUrls: ['./widget.component.scss'],\r\n             templateUrl: './widget.component.html',\r\n             changeDetection: ChangeDetectionStrategy.OnPush\r\n           })\r\nexport class NgxWidgetComponent {\r\n\r\n  @Input() swapOnMove = false;\r\n  @Output()\r\n  positionChange: EventEmitter<Rectangle> = new EventEmitter();\r\n  @Input() movable = false;\r\n  public allDirections = RESIZE_DIRECTIONS;\r\n  public isTopResizable = false;\r\n  public isRightResizable = false;\r\n  public isBottomResizable = false;\r\n  public isLeftResizable = false;\r\n  public isTopRightResizable = false;\r\n  public isTopLeftResizable = false;\r\n  public isBottomRightResizable = false;\r\n  public isBottomLeftResizable = false;\r\n  public widgetConfig: WidgetConfig;\r\n  public _position: Rectangle;\r\n  public _resizable = false;\r\n  public _resizeDirections: RESIZE_DIRECTIONS[] = ALL_DIRECTIONS;\r\n\r\n  constructor(private elRef: ElementRef) {\r\n    this.widgetConfig = new WidgetConfig(this.position);\r\n  }\r\n\r\n  get position(): Rectangle {\r\n    return this._position;\r\n  }\r\n\r\n  @Input()\r\n  set position(position: Rectangle) {\r\n    this._position = position;\r\n    this.widgetConfig.position = position;\r\n    this.positionChange.emit(position);\r\n  }\r\n\r\n  get resizable() {\r\n    return this._resizable;\r\n  }\r\n\r\n  @Input()\r\n  set resizable(resizable: boolean) {\r\n    this._resizable = resizable;\r\n    if (resizable) {\r\n      this.setResizeDirections();\r\n    }\r\n  }\r\n\r\n  get resizeDirections() {\r\n    return this._resizeDirections;\r\n  }\r\n\r\n  @Input()\r\n  set resizeDirections(dirs: RESIZE_DIRECTIONS[]) {\r\n    this._resizeDirections = <RESIZE_DIRECTIONS[]>dirs.filter((dir: RESIZE_DIRECTIONS) => {\r\n      return ALL_DIRECTIONS.indexOf(<RESIZE_DIRECTIONS>(<string>dir).toUpperCase()) !== -1;\r\n    });\r\n    this.setResizeDirections();\r\n  }\r\n\r\n  setResizeDirections() {\r\n    this.isTopResizable = false;\r\n    this.isRightResizable = false;\r\n    this.isBottomResizable = false;\r\n    this.isLeftResizable = false;\r\n    this.isTopRightResizable = false;\r\n    this.isTopLeftResizable = false;\r\n    this.isBottomRightResizable = false;\r\n    this.isBottomLeftResizable = false;\r\n    this._resizeDirections.forEach((dir) => {\r\n      switch (dir) {\r\n        case RESIZE_DIRECTIONS.top:\r\n          this.isTopResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.left:\r\n          this.isLeftResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.bottom:\r\n          this.isBottomResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.right:\r\n          this.isRightResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.topLeft:\r\n          this.isTopLeftResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.topRight:\r\n          this.isTopRightResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.bottomLeft:\r\n          this.isBottomLeftResizable = true;\r\n          break;\r\n        case RESIZE_DIRECTIONS.bottomRight:\r\n          this.isBottomRightResizable = true;\r\n          break;\r\n        default:\r\n      }\r\n    });\r\n  }\r\n\r\n  getConfig(): WidgetConfig {\r\n    return this.widgetConfig;\r\n  }\r\n\r\n  getEl(): ElementRef {\r\n    return this.elRef;\r\n  }\r\n}\r\n","export class Cell {\r\n    private _top: number;\r\n    private _left: number;\r\n\r\n    constructor(top: number, left: number) {\r\n        this._top = top;\r\n        this._left = left;\r\n    }\r\n\r\n    get top() {\r\n        return this._top;\r\n    }\r\n\r\n    get left() {\r\n        return this._left;\r\n    }\r\n}\r\n","import { Grid } from './Grid.model';\r\nimport { Cell } from './Cell.model';\r\nimport { Utils } from '../Utils';\r\nimport { Rectangle } from './Rectangle.model';\r\nimport { WidgetConfig } from './WidgetConfig.model';\r\n\r\nexport class GridRenderer {\r\n  public positions: { [key: string]: Rectangle } = {};\r\n  public cachedNextPosition: Rectangle;\r\n  public obstructions: string[] = [];\r\n  public _grid: Grid;\r\n\r\n  constructor(grid: Grid) {\r\n    this.grid = grid || new Grid();\r\n\r\n  }\r\n\r\n  get grid() {\r\n    return this._grid;\r\n  }\r\n\r\n  set grid(grid: Grid) {\r\n    this._grid = grid;\r\n    this.positions = {};\r\n    this.cachedNextPosition = undefined;\r\n    this.obstructions = [];\r\n    for (let i = 0; i < grid.rows * grid.columns; i++) {\r\n      this.obstructions[i] = null;\r\n    }\r\n  }\r\n\r\n  rasterizeCoords(left: number, top: number, gridWidth: number, gridHeight: number): Cell {\r\n    left = Math.min(Math.max(left, 0), gridWidth - 1);\r\n    top = Math.min(Math.max(top, 0), gridHeight - 1);\r\n\r\n    const x = Math.floor(top / gridHeight * this.grid.rows) + 1;\r\n    const y = Math.floor(left / gridWidth * this.grid.columns) + 1;\r\n    return new Cell(x, y);\r\n  }\r\n\r\n  getWidgetIdAt(i: number, j: number) {\r\n    for (const widgetId in this.positions) {\r\n      if (this.positions.hasOwnProperty(widgetId)) {\r\n        const position = this.positions[widgetId];\r\n\r\n        if (position.top <= i && i <= (position.top + position.height - 1) &&\r\n          position.left <= j && j <= (position.left + position.width - 1)) {\r\n          return widgetId;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getWidgetPosition(widgetId: string) {\r\n    return this.positions[widgetId];\r\n  }\r\n\r\n  setWidgetPosition(widgetId: string, newPosition: Rectangle, swappingPositions: boolean) {\r\n    const currPosition = this.positions[widgetId];\r\n    if (currPosition && !swappingPositions) {\r\n      this.setObstructionValues(currPosition, null);\r\n    }\r\n\r\n    newPosition = new Rectangle({\r\n                                  top: Utils.isNumber(newPosition.top) ? newPosition.top : currPosition.top,\r\n                                  left: Utils.isNumber(newPosition.left) ? newPosition.left : currPosition.left,\r\n                                  width: Utils.isNumber(newPosition.width) ? newPosition.width : currPosition.width,\r\n                                  height: Utils.isNumber(newPosition.height) ? newPosition.height : currPosition.height\r\n                                });\r\n    this.positions[widgetId] = newPosition;\r\n\r\n    this.setObstructionValues(this.positions[widgetId], widgetId);\r\n    this.cachedNextPosition = undefined;\r\n  }\r\n\r\n  hasSpaceLeft() {\r\n    for (const obstruction of this.obstructions) {\r\n      if (obstruction === null) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getNextPosition(): Rectangle {\r\n    if (this.cachedNextPosition !== undefined) {\r\n      return this.cachedNextPosition;\r\n    }\r\n\r\n    if (!this.hasSpaceLeft()) {\r\n      return null;\r\n    }\r\n\r\n    const maxPosition: Rectangle = this.findLargestEmptyArea();\r\n    this.cachedNextPosition = maxPosition;\r\n    return maxPosition;\r\n  }\r\n\r\n  isObstructed(i: number, j: number, excludedArea?: Rectangle) {\r\n    // obstructed if (i, j) exceeds the grid's regular non-expanding boundaries\r\n    if (i < 1 || j < 1 || j > this.grid.columns || i > this.grid.rows) {\r\n      return true;\r\n    }\r\n    const bottom = excludedArea && excludedArea.top + excludedArea.height - 1;\r\n    const right = excludedArea && excludedArea.left + excludedArea.width - 1;\r\n    // pass if (i, j) is within the excluded area, if any\r\n    if (excludedArea &&\r\n      excludedArea.top <= i &&\r\n      i <= bottom &&\r\n      excludedArea.left <= j &&\r\n      j <= right) {\r\n      return false;\r\n    }\r\n\r\n    return this._isObstructed(i, j);\r\n  }\r\n\r\n  public _isObstructed(i: number, j: number) {\r\n    return this.obstructions[(i - 1) * this.grid.columns + (j - 1)] !== null;\r\n  }\r\n\r\n  isAreaObstructed(area: Rectangle,\r\n                   options?: {\r\n                     excludedArea?: Rectangle;\r\n                     fromBottom?: boolean;\r\n                     fromRight?: boolean;\r\n                   }) {\r\n    if (!area) {\r\n      return false;\r\n    }\r\n    options = Utils.isObject(options) ? options : {};\r\n\r\n    const top = area.top;\r\n    const left = area.left;\r\n    const bottom = area.bottom || area.top + area.height - 1;\r\n    const right = area.right || area.left + area.width - 1;\r\n\r\n    if (!Utils.isNumber(top) || !Utils.isNumber(left) || !Utils.isNumber(bottom) || !Utils.isNumber(right)) {\r\n      return false;\r\n    }\r\n\r\n    const verticalStart = options.fromBottom ? bottom : top;\r\n    const verticalStep = options.fromBottom ? -1 : 1;\r\n    const verticalEnd = (options.fromBottom ? top : bottom) + verticalStep;\r\n    const horizontalStart = options.fromRight ? right : left;\r\n    const horizontalStep = options.fromRight ? -1 : 1;\r\n    const horizontalEnd = (options.fromRight ? left : right) + horizontalStep;\r\n\r\n    for (let i = verticalStart; i !== verticalEnd; i += verticalStep) {\r\n      for (let j = horizontalStart; j !== horizontalEnd; j += horizontalStep) {\r\n        if (this.isObstructed(i, j, options.excludedArea)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getStyle(widgetId: string): {\r\n    display: string;\r\n  } | {\r\n    top: string;\r\n    height: string;\r\n    left: string;\r\n    width: string;\r\n  } {\r\n    const render = this.positions[widgetId];\r\n\r\n    if (!render) {\r\n      return {display: 'none'};\r\n    }\r\n\r\n    return {\r\n      top: ((render.top - 1) * this.grid.cellSize.height).toString() + '%',\r\n      height: (render.height * this.grid.cellSize.height).toString() + '%',\r\n      left: ((render.left - 1) * this.grid.cellSize.width).toString() + '%',\r\n      width: (render.width * this.grid.cellSize.width).toString() + '%'\r\n    };\r\n  }\r\n\r\n  setObstructionValues(area: Rectangle, value: string) {\r\n    for (let i = area.top - 1; i < area.top + area.height - 1; i++) {\r\n      for (let j = area.left - 1; j < area.left + area.width - 1; j++) {\r\n        this.obstructions[i * this.grid.columns + j] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  findLargestEmptyArea(): Rectangle {\r\n    let maxArea: Rectangle = null;\r\n    let currMaxArea: Rectangle = null;\r\n    let maxSurfaceArea = 0;\r\n    let currMaxSurfaceArea = 0;\r\n    for (let i = 1; i <= this.grid.rows; i++) {\r\n      for (let j = 1; j <= this.grid.columns; j++) {\r\n        if (this._isObstructed(i, j)) {\r\n          continue;\r\n        }\r\n\r\n        const currAreaLimit = (this.grid.rows - i + 1) * (this.grid.columns - j + 1);\r\n        if (currAreaLimit < maxSurfaceArea) {\r\n          break;\r\n        }\r\n\r\n        currMaxArea = this._findLargestEmptyAreaFrom(new Cell(i, j));\r\n        currMaxSurfaceArea = currMaxArea.getSurfaceArea();\r\n\r\n        if (currMaxSurfaceArea > maxSurfaceArea) {\r\n          maxSurfaceArea = currMaxSurfaceArea;\r\n          maxArea = currMaxArea;\r\n        }\r\n      }\r\n    }\r\n    return maxArea;\r\n  }\r\n\r\n  public _findLargestEmptyAreaFrom(start: Cell) {\r\n    if (!Utils.isDefined(this.grid) || !Utils.isNumber(this.grid.columns) || !Utils.isNumber(this.grid.rows)) {\r\n      return null;\r\n    }\r\n\r\n    let maxArea = null,\r\n      maxSurfaceArea = 0,\r\n      endColumn = this.grid.columns;\r\n    for (let i = start.top; i <= this.grid.rows; i++) {\r\n      for (let j = start.left; j <= endColumn; j++) {\r\n        if (this._isObstructed(i, j)) {\r\n          endColumn = j - 1;\r\n          continue;\r\n        }\r\n\r\n        const currHeight = (i - start.top + 1);\r\n        const currWidth = (j - start.left + 1);\r\n        const currSurfaceArea = currHeight * currWidth;\r\n\r\n        if (currSurfaceArea > maxSurfaceArea) {\r\n          maxSurfaceArea = currSurfaceArea;\r\n          maxArea = new Rectangle({\r\n                                    top: start.top,\r\n                                    left: start.left,\r\n                                    width: currWidth,\r\n                                    height: currHeight\r\n                                  });\r\n        }\r\n      }\r\n    }\r\n    return maxArea;\r\n  }\r\n\r\n  render(grid: Grid, emitWidgetPositionUpdated?: Function) {\r\n    this.grid = grid;\r\n    const widgets: WidgetConfig[] = this.grid && this.grid.widgets ? this.grid.widgets : [];\r\n    const unpositionedWidgets: WidgetConfig[] = [];\r\n    widgets.forEach((widget: WidgetConfig) => {\r\n      const position: Rectangle = widget.position;\r\n      if (position.width * position.height === 0 ||\r\n        this.isAreaObstructed(position)) {\r\n        unpositionedWidgets.push(widget);\r\n      } else {\r\n        this.setWidgetPosition(widget.id, position, false);\r\n      }\r\n    });\r\n\r\n    unpositionedWidgets.forEach((widget: WidgetConfig) => {\r\n      const nextPosition = this.getNextPosition();\r\n      if (nextPosition !== null) {\r\n        widget.position = nextPosition;\r\n        this.setWidgetPosition(widget.id, nextPosition, false);\r\n      } else {\r\n        widget.position = new Rectangle();\r\n        this.setWidgetPosition(widget.id, new Rectangle(), false);\r\n      }\r\n      if (emitWidgetPositionUpdated) {\r\n        emitWidgetPositionUpdated(widget);\r\n      }\r\n    });\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Grid } from '../../models/Grid.model';\r\nimport { NgxWidgetComponent } from '../widget/widget.component';\r\nimport { GridRenderer } from '../../models/GridRenderer.model';\r\nimport { Cell } from '../../models/Cell.model';\r\nimport { WidgetConfig } from '../../models/WidgetConfig.model';\r\nimport { Rectangle } from '../../models/Rectangle.model';\r\nimport { WidgetPositionChange } from '../../models/widgetPositionChange.interface';\r\n\r\n@Component({\r\n             selector: 'ngx-widget-grid',\r\n             styleUrls: ['./grid.component.scss'],\r\n             templateUrl: './grid.component.html',\r\n             changeDetection: ChangeDetectionStrategy.OnPush\r\n           })\r\nexport class NgxWidgetGridComponent implements AfterViewInit {\r\n\r\n  @Input() showGrid = false;\r\n  @Output() public widgetPositionChange: EventEmitter<WidgetPositionChange> = new EventEmitter<WidgetPositionChange>();\r\n  @Output() public gridFull: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @ContentChildren(NgxWidgetComponent) public widgetComponents: QueryList<NgxWidgetComponent>;\r\n  public grid: Grid;\r\n  public gridRenderer: GridRenderer;\r\n  public highlightedArea: Rectangle;\r\n  public gridAlreadyFull = false;\r\n  public _rows: number;\r\n  public _columns: number;\r\n  public _highlightNextPosition = false;\r\n\r\n  constructor(private el: ElementRef,\r\n              private _changeDetector: ChangeDetectorRef,\r\n              private _renderer: Renderer2) {\r\n    this.grid = new Grid(this.rows, this.columns);\r\n    this.gridRenderer = new GridRenderer(this.grid);\r\n  }\r\n\r\n  get rows() {\r\n    return this._rows;\r\n  }\r\n\r\n  @Input()\r\n  set rows(rows) {\r\n    this._rows = rows;\r\n    this.updateGridSize();\r\n  }\r\n\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  @Input()\r\n  set columns(cols) {\r\n    this._columns = cols;\r\n    this.updateGridSize();\r\n  }\r\n\r\n  get highlightNextPosition(): boolean {\r\n    return this._highlightNextPosition;\r\n  }\r\n\r\n  @Input()\r\n  set highlightNextPosition(highlightNext: boolean) {\r\n    this._highlightNextPosition = highlightNext;\r\n    if (highlightNext) {\r\n      this.updateNextPositionHighlight();\r\n    } else {\r\n      this.resetHighlights();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.refreshWidgets();\r\n    this.widgetComponents.changes.subscribe(() => {\r\n      this.clearGrid();\r\n      this.refreshWidgets();\r\n    });\r\n  }\r\n\r\n  refreshWidgets() {\r\n    this.widgetComponents.forEach((widget: NgxWidgetComponent) => {\r\n      if (!this.hasWidget(widget)) {\r\n        this.addWidget(widget, true);\r\n      } else {\r\n      }\r\n    });\r\n    this.updateRendering();\r\n  }\r\n\r\n  hasWidget(widget: NgxWidgetComponent): boolean {\r\n    return this.grid.hasWidget(widget.getConfig());\r\n  }\r\n\r\n  addWidget(widget: NgxWidgetComponent, deferredRender?: boolean) {\r\n    this.grid.add(widget.getConfig());\r\n    if (!deferredRender) {\r\n      this.updateRendering();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    this.grid.removeAll();\r\n  }\r\n\r\n  updateGridSize() {\r\n    const columns = this.columns;\r\n    const rows = this.rows;\r\n    if (this.grid.columns !== columns || this.grid.rows !== rows) {\r\n      this.grid.resize(rows, columns);\r\n      this.updateRendering();\r\n    }\r\n  }\r\n\r\n  updateRendering() {\r\n    this.gridRenderer.render(this.grid, this.emitUpdatePosition.bind(this));\r\n    this.updateNextPositionHighlight();\r\n    // TODO: retrieve all widgets and call their updateRendering\r\n    if (this.widgetComponents) {\r\n      this.widgetComponents.forEach((widget: NgxWidgetComponent) => {\r\n        this.updateWidget(widget, false);\r\n      });\r\n    }\r\n  }\r\n\r\n  getGridRectangle(): Rectangle {\r\n    const gridContainer = this.el.nativeElement;\r\n\r\n    // c.f. jQuery#offset: https://github.com/jquery/jquery/blob/2d715940b9b6fdeed005cd006c8bf63951cf7fb2/src/offset.js#L93-105\r\n    const rect = gridContainer.getBoundingClientRect();\r\n    if (rect.width || rect.height || gridContainer.getClientRects().length) {\r\n      const doc = gridContainer.ownerDocument;\r\n      const docElem = doc.documentElement;\r\n      return new Rectangle({\r\n                             top: rect.top + window.pageYOffset - docElem.clientTop,\r\n                             left: rect.left + window.pageXOffset - docElem.clientLeft,\r\n                             height: rect.height,\r\n                             width: rect.width\r\n                           });\r\n    }\r\n    return new Rectangle({top: 0, left: 0, height: 0, width: 0});\r\n  }\r\n\r\n  rasterizeCoords(x: number, y: number): Cell {\r\n    return this.gridRenderer.rasterizeCoords(x, y, this.el.nativeElement.clientWidth, this.el.nativeElement.clientHeight);\r\n  }\r\n\r\n  updateWidget(widget: NgxWidgetComponent, swappingWidgets: boolean) {\r\n    const config = widget.getConfig();\r\n    const newPosition = config.position;\r\n    const el: ElementRef = widget.getEl();\r\n    this.gridRenderer.setWidgetPosition(config.id, newPosition, swappingWidgets);\r\n    const widgetStyles = this.getWidgetStyle(widget);\r\n    for (const style in widgetStyles) {\r\n      if (widgetStyles.hasOwnProperty(style)) {\r\n        this._renderer.setStyle(el.nativeElement, style, widgetStyles[style]);\r\n      }\r\n    }\r\n    this.emitUpdatePosition(config);\r\n    this.assessAvailableGridSpace();\r\n  }\r\n\r\n  getWidgetPositionByWidgetId(widgetId: string) {\r\n    return this.gridRenderer.getWidgetPosition(widgetId);\r\n  }\r\n\r\n  getWidgetPosition(widget: NgxWidgetComponent) {\r\n    return this.getWidgetPositionByWidgetId(widget.getConfig().id);\r\n  }\r\n\r\n  getWidgetStyle(widget: NgxWidgetComponent) {\r\n    return this.gridRenderer.getStyle(widget.getConfig().id);\r\n  }\r\n\r\n  isPointObstructed(i: number, j: number) {\r\n    return this.gridRenderer ? this.gridRenderer.isObstructed(i, j) : true;\r\n  }\r\n\r\n  isAreaObstructed(area: Rectangle,\r\n                   options: {\r\n                     excludedArea?: Rectangle;\r\n                     fromBottom?: boolean;\r\n                     fromRight?: boolean;\r\n                   }): boolean {\r\n    return this.gridRenderer ? this.gridRenderer.isAreaObstructed(area, options) : true;\r\n  }\r\n\r\n  areaObstructor(area: Rectangle) {\r\n    return this.gridRenderer.obstructions[(area.top - 1) * this.grid.columns + (area.left - 1)];\r\n  }\r\n\r\n  highlightArea(area: Rectangle) {\r\n    if (area.top && area.left && area.height && area.width) {\r\n      setTimeout(() => {\r\n        this.highlightedArea = area;\r\n        this._changeDetector.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  updateNextPositionHighlight() {\r\n    if (this.highlightNextPosition) {\r\n      this.highlightedArea = this.gridRenderer.getNextPosition();\r\n    }\r\n  }\r\n\r\n  getNextPosition() {\r\n    return this.gridRenderer.getNextPosition();\r\n  }\r\n\r\n  getPositions() {\r\n    return this.grid.widgets;\r\n  }\r\n\r\n  resetHighlights() {\r\n    setTimeout(() => {\r\n      this.highlightedArea = null;\r\n      this._changeDetector.markForCheck();\r\n    });\r\n  }\r\n\r\n  emitUpdatePosition(widget: WidgetConfig) {\r\n    this.widgetPositionChange.emit({\r\n                                     index: this.getWidgetIndex(widget),\r\n                                     newPosition: new Rectangle(widget.position)\r\n                                   });\r\n  }\r\n\r\n  getWidgetIndex(widgetConfig: WidgetConfig) {\r\n    for (let i = this.grid.widgets.length - 1; i >= 0; i--) {\r\n      if (this.grid.widgets[i].id === widgetConfig.id) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  getWidgetById(widgetId: string): NgxWidgetComponent {\r\n    return this.widgetComponents.find(widgetCmp => {\r\n      return widgetCmp.getConfig().id === widgetId;\r\n    }) || null;\r\n  }\r\n\r\n  assessAvailableGridSpace() {\r\n    const gridHasSpaceLeft = this.gridRenderer.hasSpaceLeft();\r\n    if (this.gridAlreadyFull) {\r\n      if (gridHasSpaceLeft) {\r\n        this.gridFull.emit(false);\r\n        this.gridAlreadyFull = false;\r\n      } else {\r\n        /*No change to grid status. was and still is full*/\r\n      }\r\n    } else {\r\n      if (!gridHasSpaceLeft) {\r\n        this.gridFull.emit(true);\r\n        this.gridAlreadyFull = true;\r\n      } else {\r\n        /*No change to grid status. had and still has available space*/\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Utils } from '../../Utils';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\nimport { GridRenderer } from '../../models/GridRenderer.model';\r\nimport { Rectangle } from '../../models/Rectangle.model';\r\n\r\n@Component({\r\n             selector: 'ngx-grid-overlay',\r\n             styleUrls: ['./gridOverlay.component.scss'],\r\n             templateUrl: './gridOverlay.component.html',\r\n             changeDetection: ChangeDetectionStrategy.OnPush\r\n           })\r\nexport class NgxGridOverlayComponent {\r\n\r\n  public activeHighlight: any = null;\r\n  public gridRows: { y: SafeStyle; height: SafeStyle; }[] = [];\r\n  public gridCols: { x: SafeStyle; width: SafeStyle; }[] = [];\r\n  public _renderer: GridRenderer;\r\n  public _highlight?: Rectangle;\r\n  public _showGrid = false;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {\r\n  }\r\n\r\n\r\n  get renderer(): GridRenderer {\r\n    return this._renderer;\r\n  }\r\n\r\n  @Input()\r\n  set renderer(renderer: GridRenderer) {\r\n    this._renderer = renderer;\r\n    if (Utils.isDefined(renderer)) {\r\n      this.updateGridLines(renderer, this.showGrid);\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set rows(rows: number) {\r\n    this.updateGridLines(this.renderer, this.showGrid);\r\n  }\r\n\r\n  @Input()\r\n  set cols(rows: number) {\r\n    this.updateGridLines(this.renderer, this.showGrid);\r\n  }\r\n\r\n\r\n  get highlight() {\r\n    return this._highlight;\r\n  }\r\n\r\n  @Input()\r\n  set highlight(highlight) {\r\n    this._highlight = highlight;\r\n    this.clearHighlight();\r\n    if (highlight) {\r\n      this.highlightArea(highlight, this.renderer);\r\n    }\r\n  }\r\n\r\n\r\n  get showGrid() {\r\n    return this._showGrid;\r\n  }\r\n\r\n  @Input()\r\n  set showGrid(showGrid: boolean) {\r\n    this._showGrid = showGrid;\r\n    this.updateGridLines(this.renderer, showGrid);\r\n  }\r\n\r\n  updateGridLines(renderer: GridRenderer, showGrid: boolean): void {\r\n    this.clearGridLines();\r\n    if (showGrid) {\r\n      this.showGridLines(renderer);\r\n    }\r\n  }\r\n\r\n  clearHighlight(): void {\r\n    this.activeHighlight = null;\r\n  }\r\n\r\n  clearGridLines(): void {\r\n    this.gridRows.splice(0);\r\n    this.gridCols.splice(0);\r\n  }\r\n\r\n  highlightArea(area: Rectangle, renderer: GridRenderer): void {\r\n    const cellSize = renderer.grid.cellSize;\r\n    const cellHeight = cellSize.height;\r\n    const cellWidth = cellSize.width;\r\n\r\n    this.activeHighlight = {\r\n      x: (area.left - 1) * cellWidth + '%',\r\n      y: (area.top - 1) * cellHeight + '%',\r\n      height: area.height * cellHeight + '%',\r\n      width: area.width * cellWidth + '%'\r\n    };\r\n    this.sanitizer.bypassSecurityTrustStyle(this.activeHighlight);\r\n  }\r\n\r\n  showGridLines(renderer: GridRenderer): void {\r\n    const cellHeight = renderer.grid.cellSize.height;\r\n    const cellWidth = renderer.grid.cellSize.width;\r\n    const height = cellHeight + '%';\r\n    const width = cellWidth + '%';\r\n    const rows = renderer.grid.rows;\r\n    const cols = renderer.grid.columns;\r\n    for (let i = 1; i < rows; i += 2) {\r\n      let y: string, h: string, row: { y: SafeStyle, height: SafeStyle };\r\n      y = (i * cellHeight) + '%';\r\n      h = 'calc(' + height + ' - 1px)';\r\n      row = {\r\n        y: this.sanitizer.bypassSecurityTrustStyle(y),\r\n        height: this.sanitizer.bypassSecurityTrustStyle(h)\r\n      };\r\n      this.gridRows.push(row);\r\n    }\r\n\r\n    for (let i = 1; i < cols; i += 2) {\r\n      let x: string, w: string, col: { x: SafeStyle, width: SafeStyle };\r\n      x = (i * cellWidth) + '%';\r\n      w = 'calc(' + width + ' - 1px)';\r\n      col = {\r\n        x: this.sanitizer.bypassSecurityTrustStyle(x),\r\n        width: this.sanitizer.bypassSecurityTrustStyle(w)\r\n      };\r\n      this.gridCols.push(col);\r\n    }\r\n  }\r\n}\r\n","import { Cell } from './Cell.model';\r\nimport { Rectangle } from './Rectangle.model';\r\n\r\nexport class PathIterator {\r\n  private _start: Rectangle;\r\n  private _heightDelta: number;\r\n  private _widthDelta: number;\r\n  private _steps: number;\r\n  private _currStep: number;\r\n  private _currPos: Cell = null;\r\n  private _nextPos: Cell = null;\r\n\r\n  constructor(start: Rectangle, end: Rectangle) {\r\n    if (!start) {\r\n      console.error('Start not present for Path Iterator');\r\n      return;\r\n    }\r\n    if (!end) {\r\n      console.error('End not present for Path Iterator');\r\n      return;\r\n    }\r\n    this._start = start;\r\n    this._heightDelta = end.top - start.top;\r\n    this._widthDelta = end.left - start.left;\r\n    this._steps = Math.max(Math.abs(this._heightDelta), Math.abs(this._widthDelta));\r\n    this._currStep = 0;\r\n    this._currPos = null;\r\n    this._nextPos = new Cell(start.top, start.left);\r\n  }\r\n\r\n  public next(): Cell {\r\n    this._currPos = this._nextPos;\r\n\r\n    if (this._currStep < this._steps) {\r\n      this._currStep++;\r\n      const currTopDelta = Math.round((this._currStep / this._steps) * this._heightDelta);\r\n      const currLeftDelta = Math.round((this._currStep / this._steps) * this._widthDelta);\r\n      this._nextPos = new Cell(this._start.top + currTopDelta, this._start.left + currLeftDelta);\r\n    } else {\r\n      this._nextPos = null;\r\n    }\r\n\r\n    return this._currPos;\r\n  }\r\n\r\n  public hasNext(): boolean {\r\n    return this._nextPos !== null;\r\n  }\r\n}\r\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Renderer2 } from '@angular/core';\r\nimport { NgxWidgetGridComponent } from '../components/grid/grid.component';\r\nimport { Rectangle } from '../models/Rectangle.model';\r\nimport { NgxWidgetComponent } from '../components/widget/widget.component';\r\nimport { PathIterator } from '../models/PathIterator.model';\r\n\r\nexport interface RectanglePixels {\r\n  top: number;\r\n  left: number;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\n@Directive({\r\n             selector: '[ngxWidgetMover]'\r\n           })\r\nexport class NgxWidgetMoverDirective {\r\n\r\n  public cellHeight: number;\r\n  public cellWidth: number;\r\n  public startRender: RectanglePixels;\r\n  public gridPositions: Rectangle;\r\n  public moverOffset: Rectangle;\r\n  public desiredPosition: any;\r\n  public startPosition: Rectangle;\r\n  public enableDrag: string = null;\r\n  private _onMoveListener = this.onMove.bind(this);\r\n  private _onUpListener = this.onUp.bind(this);\r\n\r\n  @Input()\r\n  public ngxWidgetMover = false;\r\n\r\n  constructor(private el: ElementRef,\r\n              private renderer: Renderer2,\r\n              @Inject(forwardRef(() => NgxWidgetGridComponent))\r\n              private gridCmp: NgxWidgetGridComponent,\r\n              @Inject(forwardRef(() => NgxWidgetComponent))\r\n              private widgetCmp: NgxWidgetComponent) {\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  @HostListener('pointerdown', ['$event'])\r\n  onDown(event: MouseEvent) {\r\n    event.preventDefault();\r\n    this.renderer.addClass(this.widgetCmp.getEl().nativeElement, 'wg-moving');\r\n    const widgetContainer = this.widgetCmp.getEl().nativeElement;\r\n\r\n    this.startPosition = this.gridCmp.getWidgetPosition(this.widgetCmp);\r\n\r\n    this.startRender = {\r\n      top: widgetContainer.offsetTop,\r\n      left: widgetContainer.offsetLeft,\r\n      height: widgetContainer.clientHeight,\r\n      width: widgetContainer.clientWidth\r\n    }; // pixel values\r\n\r\n    const eventOffsetX = event.offsetX || event.layerX;\r\n    const eventOffsetY = event.offsetY || event.layerY;\r\n\r\n    this.desiredPosition = {top: this.startRender.top, left: this.startRender.left};\r\n\r\n    this.moverOffset = new Rectangle({\r\n                                       top: eventOffsetY + this.el.nativeElement.offsetTop || 0,\r\n                                       left: eventOffsetX + this.el.nativeElement.offsetLeft || 0\r\n                                     });\r\n\r\n    this.gridPositions = this.gridCmp.getGridRectangle();\r\n    this.cellHeight = (this.gridCmp.grid.cellSize.height / 100) * this.gridPositions.height;\r\n    this.cellWidth = (this.gridCmp.grid.cellSize.width / 100) * this.gridPositions.width;\r\n    this.enableDrag = this.widgetCmp.getConfig().id;\r\n\r\n    this.renderer.setStyle(this.widgetCmp.getEl().nativeElement, 'z-index', this.ngxWidgetMover ? 0 : 100);\r\n\r\n    if (typeof PointerEvent !== 'undefined') {\r\n      window.addEventListener('pointermove', this._onMoveListener);\r\n      window.addEventListener('pointerup', this._onUpListener);\r\n    } else {\r\n      window.addEventListener('mousemove', this._onMoveListener);\r\n      window.addEventListener('mouseup', this._onUpListener);\r\n    }\r\n  }\r\n\r\n  onMove(event: MouseEvent) {\r\n    if (this.enableDrag === this.widgetCmp.getConfig().id) {\r\n      event.preventDefault();\r\n      const eventClientX = event.clientX;\r\n      const eventClientY = event.clientY;\r\n      const startRender = this.startRender;\r\n      const gridDimensions = this.gridPositions;\r\n      const desiredPosition = this.desiredPosition;\r\n      // normalize the drag position\r\n      const dragPositionX = Math.round(eventClientX) - gridDimensions.left,\r\n        dragPositionY = Math.round(eventClientY) - gridDimensions.top;\r\n\r\n      desiredPosition.top = Math.min(\r\n        Math.max(dragPositionY - this.moverOffset.top, 0),\r\n        gridDimensions.height - startRender.height - 1\r\n      );\r\n      desiredPosition.left = Math.min(\r\n        Math.max(dragPositionX - this.moverOffset.left, 0),\r\n        gridDimensions.width - startRender.width - 1\r\n      );\r\n      const currentFinalPos: Rectangle = this.determineFinalPos(this.startPosition,\r\n                                                                desiredPosition,\r\n                                                                this.startRender,\r\n                                                                this.cellHeight,\r\n                                                                this.cellWidth);\r\n      this.gridCmp.highlightArea(currentFinalPos);\r\n\r\n      this.renderer.setStyle(this.widgetCmp.getEl().nativeElement, 'top', desiredPosition.top + 'px');\r\n      this.renderer.setStyle(this.widgetCmp.getEl().nativeElement, 'left', desiredPosition.left + 'px');\r\n    }\r\n  }\r\n\r\n  onUp(event: MouseEvent) {\r\n    if (this.enableDrag === this.widgetCmp.getConfig().id) {\r\n      event.preventDefault();\r\n      const eventClientX = event.clientX;\r\n      const eventClientY = event.clientY;\r\n      const startRender = this.startRender;\r\n      const gridDimensions = this.gridPositions;\r\n      const desiredPosition = this.desiredPosition;\r\n      // normalize the drag position\r\n      const dragPositionX = Math.round(eventClientX) - gridDimensions.left,\r\n        dragPositionY = Math.round(eventClientY) - gridDimensions.top;\r\n\r\n      desiredPosition.top = Math.min(\r\n        Math.max(dragPositionY - this.moverOffset.top, 0),\r\n        gridDimensions.height - startRender.height - 1\r\n      );\r\n      desiredPosition.left = Math.min(\r\n        Math.max(dragPositionX - this.moverOffset.left, 0),\r\n        gridDimensions.width - startRender.width - 1\r\n      );\r\n      const anchorTop = this.getAnchor(Math.max(dragPositionY, 0), this.cellHeight, 1);\r\n      const anchorLeft = this.getAnchor(Math.max(dragPositionX, 0), this.cellWidth, 1);\r\n      const dropPosition: any = this.gridCmp.rasterizeCoords(anchorLeft, anchorTop);\r\n      const obstructingWidgetId = this.gridCmp.areaObstructor(dropPosition);\r\n      let finalPos;\r\n      if (obstructingWidgetId && this.ngxWidgetMover) {\r\n        const obstructingWidgetCmp: NgxWidgetComponent = this.gridCmp.getWidgetById(obstructingWidgetId);\r\n        const obstructingWidgetPosition = this.gridCmp.getWidgetPositionByWidgetId(obstructingWidgetId);\r\n        const draggedWidgetPosition = this.widgetCmp.position;\r\n        this.widgetCmp.position = obstructingWidgetPosition;\r\n        this.gridCmp.updateWidget(this.widgetCmp, true);\r\n        obstructingWidgetCmp.position = draggedWidgetPosition;\r\n        this.gridCmp.updateWidget(obstructingWidgetCmp, true);\r\n      } else {\r\n        finalPos = this.determineFinalPos(this.startPosition,\r\n                                          desiredPosition,\r\n                                          this.startRender,\r\n                                          this.cellHeight,\r\n                                          this.cellWidth);\r\n        this.widgetCmp.position = finalPos;\r\n        this.gridCmp.updateWidget(this.widgetCmp, false);\r\n      }\r\n      this.gridCmp.resetHighlights();\r\n      this.renderer.removeClass(this.widgetCmp.getEl().nativeElement, 'wg-moving');\r\n      this.renderer.removeStyle(this.widgetCmp.getEl().nativeElement, 'z-index');\r\n      this.enableDrag = null;\r\n    }\r\n    if (typeof PointerEvent !== 'undefined') {\r\n      window.removeEventListener('pointermove', this._onMoveListener);\r\n      window.removeEventListener('pointerup', this._onUpListener);\r\n    } else {\r\n      window.removeEventListener('mousemove', this._onMoveListener);\r\n      window.removeEventListener('mouseup', this._onUpListener);\r\n    }\r\n  }\r\n\r\n  getAnchor(val: number, cellWOrH: number, marginFactor = 2): number {\r\n    return (val % cellWOrH) > (cellWOrH / marginFactor) ? val + Math.floor(cellWOrH) : val;\r\n  }\r\n\r\n  determineFinalPos(startPos: Rectangle, desiredPos: Rectangle, startRender: RectanglePixels,\r\n                    cellHt: number, cellWd: number): Rectangle {\r\n    if (startRender.top === desiredPos.top && startRender.left === desiredPos.left) {\r\n      return startPos;\r\n    }\r\n\r\n    const anchorTop = this.getAnchor(desiredPos.top, cellHt);\r\n    const anchorLeft = this.getAnchor(desiredPos.left, cellWd);\r\n    const movedDown = anchorTop >= startRender.top;\r\n    const movedRight = anchorLeft >= startRender.left;\r\n    const desiredFinalPosition: any = this.gridCmp.rasterizeCoords(anchorLeft, anchorTop);\r\n    const path = new PathIterator(desiredFinalPosition, startPos);\r\n    while (path && path.hasNext()) {\r\n      const currPos = path.next();\r\n\r\n      const targetArea = new Rectangle({\r\n                                         top: currPos.top,\r\n                                         left: currPos.left,\r\n                                         height: startPos.height,\r\n                                         width: startPos.width\r\n                                       });\r\n\r\n      const options = {\r\n        excludedArea: startPos,\r\n        fromBottom: movedDown,\r\n        fromRight: movedRight\r\n      };\r\n      // If widget swap is enabled and area is obstructed, show original position\r\n      if (this.ngxWidgetMover && this.gridCmp.isAreaObstructed(targetArea, options)) {\r\n        return new Rectangle(startPos);\r\n      }\r\n      if (!this.gridCmp.isAreaObstructed(targetArea, options)) {\r\n        // try to get closer to the desired position by leaving the original path\r\n        const height = targetArea.height;\r\n        const width = targetArea.width;\r\n        if (desiredFinalPosition.top < targetArea.top) {\r\n          while (desiredFinalPosition.top <= (targetArea.top - 1)) {\r\n            const checkRect = new Rectangle({top: targetArea.top - 1, left: targetArea.left, height, width});\r\n            const isRectVacant = !this.gridCmp.isAreaObstructed(checkRect, options);\r\n            if (isRectVacant) {\r\n              targetArea.top--;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        } else if (desiredFinalPosition.top > targetArea.top) {\r\n          while (desiredFinalPosition.top >= (targetArea.top + 1)) {\r\n            const checkRect = new Rectangle({top: targetArea.top + 1, left: targetArea.left, height, width});\r\n            const isRectVacant = !this.gridCmp.isAreaObstructed(checkRect, options);\r\n            if (isRectVacant) {\r\n              targetArea.top++;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (desiredFinalPosition.left < targetArea.left) {\r\n          while (desiredFinalPosition.left <= (targetArea.left - 1)) {\r\n            const checkRect = new Rectangle({top: targetArea.top, left: targetArea.left - 1, height, width});\r\n            const isRectVacant = !this.gridCmp.isAreaObstructed(checkRect, options);\r\n            if (isRectVacant) {\r\n              targetArea.left--;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        } else if (desiredFinalPosition.left > targetArea.left) {\r\n          while (desiredFinalPosition.left >= (targetArea.left + 1)) {\r\n            const checkRect = new Rectangle({top: targetArea.top, left: targetArea.left + 1, height, width});\r\n            const isRectVacant = !this.gridCmp.isAreaObstructed(checkRect, options);\r\n            if (isRectVacant) {\r\n              targetArea.left++;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return new Rectangle(targetArea);\r\n      }\r\n    }\r\n    return new Rectangle(startPos);\r\n  }\r\n}\r\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Renderer2 } from '@angular/core';\r\nimport { NgxWidgetGridComponent } from '../components/grid/grid.component';\r\nimport { NgxWidgetComponent } from '../components/widget/widget.component';\r\nimport { Rectangle } from '../models/Rectangle.model';\r\nimport { RESIZE_DIRECTIONS } from '../Utils';\r\n\r\nconst MIN_HEIGHT = 42;\r\nconst MIN_WIDTH = 42;\r\n\r\n@Directive({\r\n             selector: '[ngxWidgetResizer]'\r\n           })\r\nexport class NgxWidgetResizerDirective {\r\n\r\n  public moveUpAllowed = false;\r\n  public moveDownAllowed = false;\r\n  public moveLeftAllowed = false;\r\n  public moveRightAllowed = false;\r\n  public parentContainer: any;\r\n  public startRender: any;\r\n  public gridPositions: Rectangle;\r\n  public delta: { top: number, right: number, bottom: number, left: number };\r\n  public draggerOffset: { top: number, right: number, bottom: number, left: number };\r\n  public startPosition: Rectangle;\r\n  public enableDrag: string = null;\r\n  public _resizeDirection: string;\r\n  private _onMoveListener = this.onMove.bind(this);\r\n  private _onUpListener = this.onUp.bind(this);\r\n\r\n  constructor(private el: ElementRef,\r\n              private renderer: Renderer2,\r\n              @Inject(forwardRef(() => NgxWidgetGridComponent))\r\n              private gridCmp: NgxWidgetGridComponent,\r\n              @Inject(forwardRef(() => NgxWidgetComponent))\r\n              private widgetCmp: NgxWidgetComponent) {\r\n    this.parentContainer = this.el.nativeElement.parentElement;\r\n  }\r\n\r\n  public get resizeDirection() {\r\n    return this._resizeDirection;\r\n  }\r\n\r\n  @Input()\r\n  public set ngxWidgetResizer(dir: string) {\r\n    this._resizeDirection = dir;\r\n    this.moveUpAllowed = false;\r\n    this.moveDownAllowed = false;\r\n    this.moveLeftAllowed = false;\r\n    this.moveRightAllowed = false;\r\n    switch (dir) {\r\n      case RESIZE_DIRECTIONS.top:\r\n        this.moveUpAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.left:\r\n        this.moveLeftAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.bottom:\r\n        this.moveDownAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.right:\r\n        this.moveRightAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.topLeft:\r\n        this.moveUpAllowed = true;\r\n        this.moveLeftAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.topRight:\r\n        this.moveUpAllowed = true;\r\n        this.moveRightAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.bottomLeft:\r\n        this.moveDownAllowed = true;\r\n        this.moveLeftAllowed = true;\r\n        break;\r\n      case RESIZE_DIRECTIONS.bottomRight:\r\n        this.moveDownAllowed = true;\r\n        this.moveRightAllowed = true;\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  @HostListener('pointerdown', ['$event'])\r\n  @HostListener('mousedown', ['$event'])\r\n  onDown(event: MouseEvent) {\r\n    event.preventDefault();\r\n    this.enableDrag = this.widgetCmp.getConfig().id;\r\n    this.renderer.addClass(this.widgetCmp.getEl().nativeElement, 'wg-resizing');\r\n    this.renderer.addClass(this.el.nativeElement, 'dragging');\r\n    this.startPosition = this.gridCmp.getWidgetPosition(this.widgetCmp);\r\n\r\n    this.startRender = {\r\n      top: Math.ceil(this.widgetCmp.getEl().nativeElement.offsetTop),\r\n      left: Math.ceil(this.widgetCmp.getEl().nativeElement.offsetLeft),\r\n      height: Math.floor(this.parentContainer.offsetHeight),\r\n      width: Math.floor(this.parentContainer.offsetWidth)\r\n    }; // pixel values\r\n    this.startRender.bottom = this.startRender.top + this.startRender.height;\r\n    this.startRender.right = this.startRender.left + this.startRender.width;\r\n\r\n    const eventOffsetX = event.offsetX || event.layerX;\r\n    const eventOffsetY = event.offsetY || event.layerY;\r\n\r\n    this.delta = {top: 0, right: 0, bottom: 0, left: 0};\r\n    this.draggerOffset = {\r\n      top: eventOffsetY,\r\n      left: eventOffsetX,\r\n      bottom: eventOffsetY - this.el.nativeElement.offsetHeight,\r\n      right: eventOffsetX - this.el.nativeElement.offsetWidth\r\n    };\r\n\r\n    this.gridPositions = this.gridCmp.getGridRectangle();\r\n    if (typeof PointerEvent !== 'undefined') {\r\n      window.addEventListener('pointermove', this._onMoveListener);\r\n      window.addEventListener('pointerup', this._onUpListener);\r\n    } else {\r\n      window.addEventListener('mousemove', this._onMoveListener);\r\n      window.addEventListener('mouseup', this._onUpListener);\r\n    }\r\n  }\r\n\r\n  onMove(event: MouseEvent) {\r\n    if (this.enableDrag === this.widgetCmp.getConfig().id) {\r\n      event.preventDefault();\r\n      const eventClientX = event.clientX;\r\n      const eventClientY = event.clientY;\r\n      const gridDims = this.gridPositions;\r\n      const startRender = this.startRender;\r\n      // normalize the drag position\r\n      const dragPositionX = Math.round(eventClientX) - gridDims.left;\r\n      const dragPositionY = Math.round(eventClientY) - gridDims.top;\r\n      const delta = this.delta;\r\n      if (this.moveUpAllowed) {\r\n        delta.top = Math.min(Math.max(dragPositionY - this.draggerOffset.top, 0), gridDims.height) - startRender.top;\r\n        delta.top = Math.min(delta.top, startRender.height - MIN_HEIGHT);\r\n      } else if (this.moveDownAllowed) {\r\n        delta.bottom = startRender.bottom - Math.min(Math.max(dragPositionY - this.draggerOffset.bottom, 0), gridDims.height);\r\n        delta.bottom = Math.min(delta.bottom, startRender.height - MIN_HEIGHT);\r\n      }\r\n\r\n      if (this.moveLeftAllowed) {\r\n        delta.left = Math.min(Math.max(dragPositionX - this.draggerOffset.left, 0), gridDims.width) - startRender.left;\r\n        delta.left = Math.min(delta.left, startRender.width - MIN_WIDTH);\r\n      } else if (this.moveRightAllowed) {\r\n        delta.right = startRender.right - Math.min(Math.max(dragPositionX - this.draggerOffset.right, 0), gridDims.width);\r\n        delta.right = Math.min(delta.right, startRender.width - MIN_WIDTH);\r\n      }\r\n\r\n      const currentFinalPos = this.determineFinalPos();\r\n      this.gridCmp.highlightArea(currentFinalPos);\r\n\r\n      this.renderer.setStyle(this.parentContainer, 'top', this.delta.top + 'px');\r\n      this.renderer.setStyle(this.parentContainer, 'left', this.delta.left + 'px');\r\n      this.renderer.setStyle(this.parentContainer, 'bottom', this.delta.bottom + 'px');\r\n      this.renderer.setStyle(this.parentContainer, 'right', this.delta.right + 'px');\r\n    }\r\n  }\r\n\r\n  onUp(event: MouseEvent) {\r\n    if (this.enableDrag === this.widgetCmp.getConfig().id) {\r\n      event.preventDefault();\r\n      this.el.nativeElement.setAttribute('draggable', false);\r\n      this.renderer.removeClass(this.el.nativeElement, 'dragging');\r\n      this.renderer.removeClass(this.widgetCmp.getEl().nativeElement, 'wg-resizing');\r\n      this.enableDrag = null;\r\n      this.widgetCmp.position = this.determineFinalPos();\r\n      this.gridCmp.updateWidget(this.widgetCmp, false);\r\n      this.gridCmp.resetHighlights();\r\n\r\n      // reset style\r\n      this.renderer.removeClass(this.widgetCmp.getEl().nativeElement, 'wg-resizing');\r\n      this.renderer.removeClass(this.el.nativeElement, 'dragging');\r\n      this.renderer.setStyle(this.parentContainer, 'top', '');\r\n      this.renderer.setStyle(this.parentContainer, 'left', '');\r\n      this.renderer.setStyle(this.parentContainer, 'bottom', '');\r\n      this.renderer.setStyle(this.parentContainer, 'right', '');\r\n    }\r\n    if (typeof PointerEvent !== 'undefined') {\r\n      window.removeEventListener('pointermove', this._onMoveListener);\r\n      window.removeEventListener('pointerup', this._onUpListener);\r\n    } else {\r\n      window.removeEventListener('mousemove', this._onMoveListener);\r\n      window.removeEventListener('mouseup', this._onUpListener);\r\n    }\r\n  }\r\n\r\n  findCollision(start: number, end: number, val: number, reverse = false): boolean {\r\n    let foundCollision = false;\r\n    for (let i = start; i <= end; i++) {\r\n      const checker = reverse ? this.gridCmp.isPointObstructed(i, val) : this.gridCmp.isPointObstructed(val, i);\r\n      if (checker) {\r\n        foundCollision = true;\r\n        break;\r\n      }\r\n    }\r\n    return foundCollision;\r\n  }\r\n\r\n  determineFinalPos(): any {\r\n    const finalPos: Rectangle = new Rectangle();\r\n    const startRender = this.startRender;\r\n    const delta = this.delta;\r\n    const requestedStartPoint = this.gridCmp.rasterizeCoords(startRender.left + delta.left + 1, startRender.top + delta.top + 1);\r\n    const requestedEndPoint = this.gridCmp.rasterizeCoords(startRender.right - delta.right - 1, startRender.bottom - delta.bottom - 1);\r\n\r\n    const requestedPos = {\r\n      top: requestedStartPoint.top,\r\n      left: requestedStartPoint.left,\r\n      right: requestedEndPoint.left,\r\n      bottom: requestedEndPoint.top\r\n    };\r\n    // determine a suitable final position (one that is not obstructed)\r\n    let foundCollision;\r\n    const start = Math.max(this.startPosition.left, requestedPos.left);\r\n    const end = Math.min(this.startPosition.right, requestedPos.right);\r\n    if (this.moveUpAllowed && requestedPos.top < this.startPosition.top) {\r\n      finalPos.top = this.startPosition.top;\r\n\r\n      while (finalPos.top > requestedPos.top) {\r\n        // check whether adding another row above would cause any conflict\r\n        foundCollision = this.findCollision(start, end, finalPos.top - 1);\r\n        if (foundCollision) {\r\n          break;\r\n        }\r\n        finalPos.top--; // add row above\r\n      }\r\n    } else if (this.moveDownAllowed && requestedPos.bottom > this.startPosition.bottom) {\r\n      finalPos.top = finalPos.top || requestedPos.top;\r\n      finalPos.height = this.startPosition.bottom + 1 - this.startPosition.top;\r\n      while (finalPos.bottom < requestedPos.bottom) {\r\n        // check whether adding another row below would cause any conflict\r\n        foundCollision = this.findCollision(start, end, finalPos.bottom + 1);\r\n        if (foundCollision) {\r\n          break;\r\n        }\r\n        finalPos.height++; // add row below\r\n      }\r\n    }\r\n\r\n    finalPos.top = finalPos.top || requestedPos.top;\r\n    finalPos.height = finalPos.height || requestedPos.bottom + 1 - finalPos.top;\r\n\r\n    if (this.moveLeftAllowed && requestedPos.left < this.startPosition.left) {\r\n      finalPos.left = this.startPosition.left;\r\n\r\n      while (finalPos.left > requestedPos.left) {\r\n        // check whether adding another column would cause any conflict\r\n        foundCollision = this.findCollision(finalPos.top, finalPos.bottom, finalPos.left - 1, true);\r\n        if (foundCollision) {\r\n          break;\r\n        }\r\n\r\n        finalPos.left--; // add column\r\n      }\r\n    } else if (this.moveRightAllowed && requestedPos.right > this.startPosition.right) {\r\n      finalPos.left = finalPos.left || requestedPos.left;\r\n      finalPos.width = this.startPosition.right + 1 - this.startPosition.left;\r\n      while (finalPos.right < requestedPos.right) {\r\n        foundCollision = this.findCollision(finalPos.top, finalPos.bottom, finalPos.right + 1, true);\r\n        if (foundCollision) {\r\n          break;\r\n        }\r\n\r\n        finalPos.width++;\r\n      }\r\n    }\r\n\r\n    finalPos.left = finalPos.left || requestedPos.left;\r\n    finalPos.width = finalPos.width || requestedPos.right + 1 - finalPos.left;\r\n    return finalPos;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxGridOverlayComponent } from './components/gridOverlay/gridOverlay.component';\r\nimport { NgxWidgetComponent } from './components/widget/widget.component';\r\nimport { NgxWidgetGridComponent } from './components/grid/grid.component';\r\nimport { NgxWidgetMoverDirective } from './directives/widgetMover.directive';\r\nimport { NgxWidgetResizerDirective } from './directives/widgetResizer.directive';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n            imports: [\r\n              CommonModule\r\n            ],\r\n            declarations: [\r\n              NgxGridOverlayComponent,\r\n              NgxWidgetComponent,\r\n              NgxWidgetGridComponent,\r\n              NgxWidgetMoverDirective,\r\n              NgxWidgetResizerDirective\r\n            ],\r\n            exports: [\r\n              NgxWidgetComponent,\r\n              NgxWidgetGridComponent\r\n            ]\r\n          })\r\nexport class NgxWidgetGridModule {}\r\n"]}